package home;

public class Stack_platform {
    private float elevation;
    private float angle;
    private float width;
    Stack_platform(float elevation_, float angle_, float width_)
    {
        elevation = elevation_;
        angle     = angle_;
        width     = width_;
    };
    private float steel_weight;
    public void Weight(float w){
    	steel_weight = w;
    }
    public void WeightByRGC000(float ID_tube){
    	steel_weight = Standard.RGC000_Platform()*
                Standard.CONST_M_PI*(ID_tube+width)*angle/360.f*
                width;
    }

    private float live_load;
    public void LiveLoadOST(float ID_tube){
    	live_load =  Standard.OST26_260_758_LiveLoad_Platform()*
    			Standard.CONST_M_PI*(ID_tube+width)*angle/360.f*
                width;
    }
    public void LiveLoad(float ID_tube, float liveload){
    	live_load =  liveload*
    			Standard.CONST_M_PI*(ID_tube+width)*angle/360.f*
                width;
    }

    private float snow_weight;
    public void Snow(float ID_tube, float snow){
    	snow_weight =  snow*
    			Standard.CONST_M_PI*(ID_tube+width)*angle/360.f*
                width;
    }
    public void SnowSNiP(float ID_tube, Standard.SNiP2_01_07_snow region){
    	float snow = Standard.SNiP2_01_07_table4(region);
        snow_weight =  snow*
    			Standard.CONST_M_PI*(ID_tube+width)*angle/360.f*
                width;
    }


	/*
	struct Stack_PLTF
	{
	    void Printf()
	    {
	        printf("Elevation = %+5.0f\n",elevation*1e3);
	        printf("Angle of pltf = %5.0f deg.\n",angle);
	        printf("Width of pltf = %5.0f mm\n"  ,width*1e3);
	    };
	    double Weight(double DiameterInside, bool OUT = false)
	    {
	        double
	        if(OUT)
	        {
	            printf("Platform: "); Printf();
	            RGC000_Platform(OUT);
	            printf("Diameter of stack = %.2f m\n", DiameterInside);
	            printf("Weight = %.2f kg\n", w);
	        }
	        return w;
	    }
	    double LiveLoad(double DiameterInside, bool OUT = false)
	    {
	        double w =
	        if(OUT)
	        {
	            printf("Platform: "); Printf();
	            OST26_260_758_LiveLoad_Platform(OUT);
	            printf("Diameter of stack = %.2f m\n", DiameterInside);
	            printf("Live load = %.2f kg\n", w);
	        }
	        return w;
	    }
	    double Snow(
	        if(OUT)
	        {
	            printf("Platform: "); Printf();
	            SNiP2_01_07_table4(region, Sg, OUT);
	            printf("Diameter of stack = %.2f m\n", DiameterInside);
	            printf("Snow = %.2f kg\n", w);
	        }
	        return w;
	    }
	    double Wind(Wind_Region region, bool OUT = false)
	    {
	        float K = 0;
	        if(angle <= 90) K = 0.5;
	        else            K = 1.0;
	        double Wo;
	        SNiP2_01_07_table5(region, Wo, false);
	        double Area = (0.200+1.250)*width;//
	        double w = Area * K * Wo;
	        return w;
	    }
	};
*/
}


package home;

public class Standard {

	static float CONST_M_PI = 3.1415926f;

	public static double E = 2.06e11f;


	public static double Area_tube(double ID, double OD){
		return Standard.CONST_M_PI/4.f*(Math.pow(OD,2f)-Math.pow(ID,2f));
	}
	public static double Inertia_tube(double ID, double OD){
		return Standard.CONST_M_PI/4.f*(Math.pow(OD,4f)/16f-Math.pow(ID,4f)/16f);
	}

	public static float RGC000_Ladder(){
	    return 27f;
	}

	public static float RGC000_Platform(){
	    return 110f;
	}

	public static float OST26_260_758_LiveLoad_Ladder(){
	    return 250f;
	}

	public static float OST26_260_758_LiveLoad_Platform(){
	    return 408f;
	}

	public static enum SNiP2_01_07_snow
	{
	    SNiP2_01_07_snow_I,
	    SNiP2_01_07_snow_II,
	    SNiP2_01_07_snow_III,
	    SNiP2_01_07_snow_IV,
	    SNiP2_01_07_snow_V,
	    SNiP2_01_07_snow_VI,
	    SNiP2_01_07_snow_VII,
	    SNiP2_01_07_snow_VIII
	};
	public static float SNiP2_01_07_table4(SNiP2_01_07_snow region)
	{
	    switch(region)
	    {
	        case SNiP2_01_07_snow_I   : return  80f ;
	        case SNiP2_01_07_snow_II  : return 120f ;
	        case SNiP2_01_07_snow_III : return 180f ;
	        case SNiP2_01_07_snow_IV  : return 240f ;
	        case SNiP2_01_07_snow_V   : return 320f ;
	        case SNiP2_01_07_snow_VI  : return 400f ;
	        case SNiP2_01_07_snow_VII : return 480f ;
	        case SNiP2_01_07_snow_VIII: return 560f ;
	        default:
	        	return 10000f;
	    }
	}

	public static void string_line(){
		System.out.println("------------------");
	}
	static void Print(String header,double[][] Stiff){
		string_line();
		System.out.println(header);
		for(int i=0;i<Stiff.length;i++){
			String str = "";
			for(int j=0;j<Stiff[i].length;j++)
				str += String.format("%+.2e",Stiff[i][j])+"\t";
			System.out.println(str);
		}
	}
	/*
	static double[][] Multiply(double[][]A, double[][]B){
		double[][] tmp = new double[A[0].length][B.length];
		for(int i=0;i<A[0].length;i++){
			for(int j=0;j<B.length;j++)
				for(int k=0;k<A.length;k++)
					tmp[i][j] += A[i][k]*B[k][j];
		}
		return tmp;
	}*/

	static void Print(String header,double[] Stiff){
		string_line();
		System.out.println(header);
		String str = "";
		for(int i=0;i<Stiff.length;i++){
			str+= String.format("%+.2e",Stiff[i])+"\t";
		}
		System.out.println(str);
	}

	static void Print(String header,int[] Stiff){
		string_line();
		System.out.println(header);
		String str = "";
		for(int i=0;i<Stiff.length;i++){
			str+= Stiff[i]+"\t";
		}
		System.out.println(str);
	}

	public static double[] gauss(double[][] a, double[] b) {
	    int n = a.length;
	    for (int row = 0; row < n; row++) {
	      int best = row;
	      for (int i = row + 1; i < n; i++)
	        if (Math.abs(a[best][row]) < Math.abs(a[i][row]))
	          best = i;
	      double[] tt = a[row];
	      a[row] = a[best];
	      a[best] = tt;
	      double t = b[row];
	      b[row] = b[best];
	      b[best] = t;
	      for (int i = row + 1; i < n; i++)
	        a[row][i] /= a[row][row];
	      b[row] /= a[row][row];
	      // a[row][row] = 1;
	      for (int i = 0; i < n; i++) {
	    	  double x = a[i][row];
	        if (i != row && x != 0) {
	          // row + 1 instead of row is an optimization
	          for (int j = row + 1; j < n; j++)
	            a[i][j] -= a[row][j] * x;
	          b[i] -= b[row] * x;
	        }
	      }
	    }
	    return b;
	  }
	/*
	public static final void invert(double A[][]) {
        int n = A.length;
        int row[] = new int[n];
        int col[] = new int[n];
        double temp[] = new double[n];
        int hold, I_pivot, J_pivot;
        double pivot, abs_pivot;

        if (A[0].length != n) {
            System.out.println("Error in Matrix.invert, inconsistent array sizes.");
        }
        // ���������� row � column ��� ������ ���������.
        for (int k = 0; k < n; k++) {
            row[k] = k;
            col[k] = k;
        }
        // ������ �������� �����
        for (int k = 0; k < n; k++) {
            // ������ ���������� ������� ��� ������
            pivot = A[row[k]][col[k]];
            I_pivot = k;
            J_pivot = k;
            for (int i = k; i < n; i++) {
                for (int j = k; j < n; j++) {
                    abs_pivot = Math.abs(pivot);
                    if (Math.abs(A[row[i]][col[j]]) > abs_pivot) {
                        I_pivot = i;
                        J_pivot = j;
                        pivot = A[row[i]][col[j]];
                    }
                }
            }
            if (Math.abs(pivot) < 1.0E-10) {
                System.out.println("Matrix is singular !");
                return;
            }
            //������������ �-�� ������ � �-��� ������� � ������� � �������, ���������� �������� �������(pivot ������)
            hold = row[k];
            row[k] = row[I_pivot];
            row[I_pivot] = hold;
            hold = col[k];
            col[k] = col[J_pivot];
            col[J_pivot] = hold;
            // k-�� ������ � ������ ������������ ����� �� �������� �������
            A[row[k]][col[k]] = 1.0 / pivot;
            for (int j = 0; j < n; j++) {
                if (j != k) {
                    A[row[k]][col[j]] = A[row[k]][col[j]] * A[row[k]][col[k]];
                }
            }
            // ���������� ����
            for (int i = 0; i < n; i++) {
                if (k != i) {
                    for (int j = 0; j < n; j++) {
                        if (k != j) {
                            A[row[i]][col[j]] = A[row[i]][col[j]] - A[row[i]][col[k]] *
                                    A[row[k]][col[j]];
                        }
                    }
                    A[row[i]][col[k]] = -A[row[i]][col[k]] * A[row[k]][col[k]];
                }
            }
        }
        // ����� �������� �����

        // ������������ ����� rows
        for (int j = 0; j < n; j++) {
            for (int i = 0; i < n; i++) {
                temp[col[i]] = A[row[i]][j];
            }
            for (int i = 0; i < n; i++) {
                A[i][j] = temp[i];
            }
        }
        // ������������ ����� columns
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                temp[row[j]] = A[i][col[j]];
            }
            for (int j = 0; j < n; j++) {
                A[i][j] = temp[j];
            }
        }
    }

    public static final double determinant(final double A[][]) {
        int n = A.length;
        double D = 1.0;                 // ������������
        double B[][] = new double[n][n];  // ������� �������
        int row[] = new int[n];
        int hold, I_pivot;
        double pivot;
        double abs_pivot;

        if (A[0].length != n) {
            System.out.println("Error in Matrix.determinant, inconsistent array sizes.");
        }
        // ������� ������� �������
        for (int i = 0; i < n; i++)
            for (int j = 0; j < n; j++)
                B[i][j] = A[i][j];
        // ��������� ������ ������������
        for (int k = 0; k < n; k++) {
            row[k] = k;
        }
        // ������ ��������� �����
        for (int k = 0; k < n - 1; k++) {
            // ������� ��������� ������� ��� ������
            pivot = B[row[k]][k];
            abs_pivot = Math.abs(pivot);
            I_pivot = k;
            for (int i = k; i < n; i++) {
                if (Math.abs(B[row[i]][k]) > abs_pivot) {
                    I_pivot = i;
                    pivot = B[row[i]][k];
                    abs_pivot = Math.abs(pivot);
                }
            }
            // ���� ������� ����� ������, �� ������ ���� ������������ � ������ ������� �������
            if (I_pivot != k) {
                hold = row[k];
                row[k] = row[I_pivot];
                row[I_pivot] = hold;
                D = -D;
            }
            // �������� �� ����
            if (abs_pivot < 1.0E-10) {
                return 0.0;
            } else {
                D = D * pivot;
                // ����� �� ������
                for (int j = k + 1; j < n; j++) {
                    B[row[k]][j] = B[row[k]][j] / B[row[k]][k];
                }
                //  ���������� ����
                for (int i = 0; i < n; i++) {
                    if (i != k) {
                        for (int j = k + 1; j < n; j++) {
                            B[row[i]][j] = B[row[i]][j] - B[row[i]][k] * B[row[k]][j];
                        }
                    }
                }
            }
            // ����� ����������� �����
        }
        // ����� �������� �����
        return D * B[row[n - 1]][n - 1];
    }

*/
    public static final double[][] multiply(final double A[][], final double B[][]) {
        int ni = A.length;
        int nk = A[0].length;
        int nj = B[0].length;
        double C[][] = new double[ni][nj];
        if (B.length != nk || C.length != ni || C[0].length != nj) {
            System.out.println("Error in Matrix.multiply, incompatible sizes");
        }

        for (int i = 0; i < ni; i++)
            for (int j = 0; j < nj; j++) {
                C[i][j] = 0.0;
                for (int k = 0; k < nk; k++)
                    C[i][j] = C[i][j] + A[i][k] * B[k][j];
            }
        return C;
    }

    public static final double[] multiply(final double A[][], final double B[]) {
        int ni = A.length;
        int nk = A[0].length;
        double C[] = new double[ni];
        if (B.length != nk || C.length != ni) {
            System.out.println("Error in Matrix.multiply, incompatible sizes");
        }

        for (int i = 0; i < ni; i++){
                C[i] = 0.0;
                for (int k = 0; k < nk; k++)
                    C[i] = C[i] + A[i][k] * B[k];
                }
        return C;
    }
/*
    public static final void add(final double A[][], final double B[][],
                                 double C[][]) {
        int ni = A.length;
        int nj = A[0].length;
        if (B.length != ni || C.length != ni || B[0].length != nj || C[0].length != nj) {
            System.out.println("Error in Matrix.add, incompatible sizes");
        }
        for (int i = 0; i < ni; i++)
            for (int j = 0; j < nj; j++)
                C[i][j] = A[i][j] + B[i][j];
    }

    public static final void subtract(final double A[][], final double B[][], double C[][]) {
        int ni = A.length;
        int nj = A[0].length;
        if (B.length != ni || C.length != ni || B[0].length != nj || C[0].length != nj) {
            System.out.println("Error in Matrix.subtract, incompatible sizes");
        }
        for (int i = 0; i < ni; i++)
            for (int j = 0; j < nj; j++)
                C[i][j] = A[i][j] - B[i][j];
    }

    public static final boolean equals(final double A[][], final double B[][]) {
        int ni = A.length;
        int nj = A[0].length;
        boolean same = true;
        if (B.length != ni || B[0].length != nj) {
            System.out.println("Error in Matrix.equals," +
                    " incompatible sizes.");
        }
        for (int i = 0; i < ni; i++)
            for (int j = 0; j < nj; j++)
                same = same && (A[i][j] == B[i][j]);
        return same;
    }

    public static final void print(double A[][]) {
        int N = A.length;
        for (int i = 0; i < N; i++)
            for (int j = 0; j < N; j++)
                System.out.println("A[" + i + "][" + j + "]=" + A[i][j]);
    }

    public static final void multiply(double A[][], double B[], double C[]) {
        int n = A.length;
        for (int i = 0; i < n; i++) {
            C[i] = 0.0;
            for (int j = 0; j < n; j++) {
                C[i] = C[i] + A[i][j] * B[j];
            }
        }
    }*/
}









public class FemTruss2d extends FemElement {
    private final double elacity;
    private final double area;

    @SuppressWarnings("SameParameterValue")
    public FemTruss2d(double elacity, double area, FemPoint[] point) {
        super(point);
        this.elacity = elacity;
        this.area = area;
        this.point = point;
    }

    @Override
    protected int getAmountAxes() {
        return 4;
    }

    @Override
    public Matrix getTr() {
        double lambda_xx = (point[1].getX() - point[0].getX()) / getLength();
        double lambda_xy = (point[1].getY() - point[0].getY()) / getLength();
        return new Matrix(new double[][]{
                {lambda_xx, lambda_xy, 0, 0},
                {0, 0, lambda_xx, lambda_xy}
        });
    }

    @Override
    public Matrix getStiffenerMatrix() {
        double EFL = elacity * area / getLength();
        return new Matrix(new double[][]{
                {EFL, -EFL},
                {-EFL, EFL}
        });
    }

    @Override
    protected void setGlobalDisplacementInPoint(double[] localDisplacement) {
        point[0].setGlobalDisplacement(new double[]{localDisplacement[0],0,0});
        point[1].setGlobalDisplacement(new double[]{localDisplacement[1],0,0});
    }
}

public class TrussTest {
    @Test
    public void exampleTruss() {
        FemPoint[] femPoints = new FemPoint[]{
                new FemPoint(0, 0, 0),
                new FemPoint(1, 0, 1.2),
                new FemPoint(2, 0.4, 0),
                new FemPoint(3, 0.4, 0.6),
                new FemPoint(4, 0.8, 0),
        };

        FemElement[] lines = new FemElement[]{
                new FemTruss2d(2e11, 40e-4, new FemPoint[]{femPoints[0], femPoints[1]}),
                new FemTruss2d(2e11, 64e-4, new FemPoint[]{femPoints[0], femPoints[2]}),
                new FemTruss2d(2e11, 60e-4, new FemPoint[]{femPoints[0], femPoints[3]}),
                new FemTruss2d(2e11, 60e-4, new FemPoint[]{femPoints[1], femPoints[3]}),
                new FemTruss2d(2e11, 40e-4, new FemPoint[]{femPoints[2], femPoints[3]}),
                new FemTruss2d(2e11, 64e-4, new FemPoint[]{femPoints[2], femPoints[4]}),
                new FemTruss2d(2e11, 60e-4, new FemPoint[]{femPoints[3], femPoints[4]})
        };

        Force[] forces = new Force[]{
                new Force(femPoints[1], Direction.DIRECTION_X, -70000),
                new Force(femPoints[3], Direction.DIRECTION_X, 42000),
        };

        Support[] supports = new Support[]{
                new Support(femPoints[0], Direction.DIRECTION_X),
                new Support(femPoints[0], Direction.DIRECTION_Y),
                new Support(femPoints[2], Direction.DIRECTION_Y),
                new Support(femPoints[4], Direction.DIRECTION_Y),
        };

        //=========================//
        try {
            Fem.calculate(femPoints, lines, forces, supports);
        } catch (Exception e) {
            e.printStackTrace();
        }

        Assert.assertEquals(lines.length, 7);
        Assert.assertEquals(supports.length, 4);
        Assert.assertEquals(forces.length, 2);

        Assert.assertEquals(lines[6].getInternalForce().get(0, 0), -61594.762917, 1e-5);
        Assert.assertEquals(lines[6].getInternalForce().get(1, 0), +61594.762917, 1e-5);
    }
}


















public class FemBendBeam2d extends FemElement {
    private final double elacity;
    private final double momentInertia;

    @SuppressWarnings("SameParameterValue")
    public FemBendBeam2d(double elacity, double momentInertia, FemPoint[] point) {
        super(point);
        this.elacity = elacity;
        this.momentInertia = momentInertia;
    }

    @Override
    protected int getAmountAxes() {
        return 4;
    }

    @Override
    protected Matrix getTr() {
        double lambda_xx = (point[1].getX() - point[0].getX()) / getLength();
        return new Matrix(new double[][]{
                {lambda_xx, 0, 0, 0},
                {0, 1, 0, 0},
                {0, 0, lambda_xx, 0},
                {0, 0, 0, 1}
        });
    }

    @Override
    protected Matrix getStiffenerMatrix() {
        double[][] stiffener = new double[4][4];
        double l = getLength();
        double EJ = elacity * momentInertia;
        stiffener[0][0] = stiffener[2][2] = 12.0 * EJ / Math.pow(l, 3);
        stiffener[1][1] = stiffener[3][3] = 4.00 * EJ / l;
        stiffener[0][1] = stiffener[1][0] = 6.00 * EJ / Math.pow(l, 2);
        stiffener[0][3] = stiffener[3][0] = 6.00 * EJ / Math.pow(l, 2);
        stiffener[0][2] = stiffener[2][0] = -12. * EJ / Math.pow(l, 3);
        stiffener[1][2] = stiffener[2][1] = -6.0 * EJ / Math.pow(l, 2);
        stiffener[2][3] = stiffener[3][2] = -6.0 * EJ / Math.pow(l, 2);
        stiffener[1][3] = stiffener[3][1] = 2.00 * EJ / l;
        return new Matrix(stiffener);
    }

    @Override
    protected void setGlobalDisplacementInPoint(double[] localDisplacement) {
        point[0].setGlobalDisplacement(new double[]{0,localDisplacement[0],localDisplacement[1]});
        point[1].setGlobalDisplacement(new double[]{0,localDisplacement[2],localDisplacement[3]});
    }
}

public class BeamBendTest {
    @Test
    public void exampleBeam() {

        FemPoint[] femPoints = new FemPoint[]{
                new FemPoint(0, 0, 0),
                new FemPoint(1, 5, 0),
        };

        FemElement[] lines = new FemElement[]{
                new FemBendBeam2d(2e11, /*53.8e-4,*/ 8356e-8, new FemPoint[]{femPoints[0], femPoints[1]}),
        };

        Force[] forces = new Force[]{
                new Force(femPoints[1], Direction.DIRECTION_Y, 10000),
        };

        Support[] supports = new Support[]{
//                new Support(femPoints[0], Direction.DIRECTION_X),
                new Support(femPoints[0], Direction.DIRECTION_Y),
                new Support(femPoints[0], Direction.ROTATE),
        };

        //=========================//
        try {
            Fem.calculate(femPoints, lines, forces, supports);
        } catch (Exception e) {
            e.printStackTrace();
        }

        Assert.assertEquals(femPoints[0].getGlobalDisplacement()[0], 0.0000, 1e-4);
        Assert.assertEquals(femPoints[0].getGlobalDisplacement()[1], 0.0000, 1e-4);
        Assert.assertEquals(femPoints[0].getGlobalDisplacement()[2], 0.0000, 1e-4);
        Assert.assertEquals(femPoints[1].getGlobalDisplacement()[1], 0.0249, 1e-4);
    }
}
